zad1 

let fold_left f a xs =
  let rec it xs acc =
    match xs with
    | [] -> acc
    | x::xs -> it xs (f acc x)
  in it xs a;;

let product = fold_left ( * ) 1 [2;1;3;7];;

zad 2

let compose f g = fun x -> f (g x);;
let square x = x * x;;
let inc x = x + 1;;
(compose square inc) 5;;
(compose inc square) 5

zad 3

let build_list n f = 
  let rec it i n =
    if i==n then [] 
    else (f i) :: it (i+1) n
  in it 0 n;;

build_list 5 (fun x->x*x);;


let negatives n =
  build_list n (fun x -> -x-1);;

negatives 5;;


let reciprocals n =
  build_list n (fun x -> 1. /. float_of_int (x + 1));;

reciprocals 5
  
  
let evens n = 
  build_list n (fun x -> x * 2);;

evens 5;;


let identityM n =
  build_list n (fun i -> build_list n (fun j -> if i = j then 1 else 0) );;

identityM 3;;



zad 4
let empty_set : 'a -> bool = fun _ -> false;;
let singleton a = fun x -> x = a;;
let in_set a s = s a;;
let union s t = fun x -> s x || t x;;
let intersect s t = fun x -> s x && t x;;


test:
let a = singleton 2;;
let b = singleton 1;;
let c = singleton 3;;
let d = singleton 7;;
let ab = union a b;;
let cd = union c d;;
let abcd = union ab cd;;
let s = in_set 7 abcd;;

zad 5

       [Node:5]
           /      \
 [Node:2]           [Node:8]____
   /   \             /      	\
Leaf  Leaf      [Node:6]   	 [Node:9]
                 /   \      	 /    \
              Leaf  [Node:7]   Leaf   Leaf
		     /    \
		   Leaf   Leaf


type 'a tree = Leaf | Node of 'a tree * 'a * 'a tree;;

let rec insert_bst x t =
  match t with
  | Leaf -> Node (Leaf, x, Leaf)
  | Node (l, v, r) ->
      if x = v
      then t
      else if v < x
      then Node (l, v, insert_bst x r)
      else Node (insert_bst x l, v, r);; 


let t =
  Node ( Node ( Leaf , 2 , Leaf ) ,
         5 ,
         Node ( Node ( Leaf , 6 , Leaf )  ,
                8 ,
                ( Node ( Leaf , 9 , Leaf ) ) ) );; 

let z = insert_bst 7 t;;


Drzewo insert_bst 7 t współdzieli wszystkie węzły z t, oprócz poddrzewa 6.
Nowy podwęzeł 7 pojawia się jako prawe dziecko 6, więc jedynie poddrzewo 6 zostaje zastąpione nową wersją.



zad 6

type 'a tree = Leaf | Node of 'a tree * 'a * 'a tree;;

let rec fold_tree f a t =
  match t with
  | Leaf -> a
  | Node (l, v, r) -> f (fold_tree f a l) v (fold_tree f a r)
;;


let tree_product t = fold_tree (fun l v r -> l * v * r) 1 t;;

let tree_flip t = fold_tree (fun l v r -> Node (r, v, l)) Leaf t;; 

let tree_height t = fold_tree (fun l _ r -> 1 + max l r) 0 t;;

let tree_span t =
  fold_tree (fun l v r -> 
      match l, r with
      | Some (min_l, max_l), Some (min_r, max_r) -> Some (min min_l v, max max_r v)
      | Some (min_l, _), None -> Some (min min_l v, v)
      | None, Some (_, max_r) -> Some (v, max max_r v)
      | None, None -> Some (v, v)
    ) None t ;;

let flatten t =
  fold_tree (fun l v r -> l @ [v] @ r) [] t

    
zad 7

type 'a tree = Leaf | Node of 'a tree * 'a * 'a tree;;

let rec flat_append t xs =
  match t with
  | Leaf -> xs
  | Node (l, v, r) -> flat_append l (v :: flat_append r xs) ;;


let flatten t = flat_append t [];;




